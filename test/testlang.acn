# Acorn language tests

# warnings - these are not allowed
1 = 1
self, this = 0,1

# Conditional expressions
$test.True(true, "true is True")
$test.Equal(null || 'x', 'x', "(null or 'x')==='x'")
$test.Equal(null and 'x', null, "(null and 'x')===null")
$test.Equal(0<1 and 1<2, true, "(0<1 and 1<2)===true")
$test.Equal(2<1 ? 'a' else 'b', 'b', "2<1 ? 'a' else 'b' == 'b'")

if !1===1
	$test.True(false, "!1===1")
if !true
	$test.True(false, "!true")
if !(2<3 && 1<2 || 0<1 && 0<4)
	$test.True(false, "!(2<3 && 1<2 || 0<1 && 0<4)")

# if / clause
local a = null
a=3 if not a
$test.True(a===3, "if suffix")

# while
job = 0
while job<5
	job = job + 1
$test.Equal(job, 5, "while increments job 5 times")

# Parameter default value
parmdefault = [a=1]
	a
$test.Equal(parmdefault(), 1, "Parameter default")
$test.Equal(parmdefault(3), 3, "Parameter default override")

# Parallel assignment
a,b = 1,2
a,b = b,a
$test.True(a===2 and b===1, "Swap values failed")

Integer.traits
	Factorial: [total=1]
		return total if self<2
		(self-1).Factorial(self*total)
$test.Equal(10 .Factorial, 3628800, "Recursive factorial method with tail call")

returning = [a]
	a if a # implicit return calculated for 'else'
$test.Equal(returning(1), 1, "Returning 1")
$test.Equal(returning(), null, "Returning no values")

# test splat, parallel assignment, muliple returns
splat = [a, ...]
	passon = [...]
		...
	if a===3
		a, ..., ...
	elif a==='mult'
		local c,d = ...
		c*d
	elif a==='multby2'
		local b,c,d = 2,...
		b*c*d
	elif a==='2few'
		local b,c,d = ...
		c,d = 4 if not c
		b,c,d
	elif a==='passon'
		local n,m = passon(5,8)
		n*m
	elif a==='tolist'
		+List
			each n in ...
				this << n
	else
		passon('a', ...)
v1,v2,v3,v4 = splat(3,6,2)
$test.True(v1===3 and v2===6 and v3===6 and v4===2, "parallel assignment for multiple return values")
$test.True(splat('mult', 3, 4)===12, "parallel assignment with splat")
$test.True(splat('multby2', 3, 4)===24, "parallel assignment with end-splat")
v1,v2,v3 = splat('2few',1)
$test.True(v1===1 and v2===4 and v3===null, "Too few values")
$test.True(splat('passon')===40, "parallel assignment from a method")
v1,v2 = splat('else', 'b', 'c')
$test.True(v1==='a' and v2==='b', "Pass on and return multiple values")
$test.Equal(splat('tolist','a')[0], 'a', "splat to list")
$test.Equal(splat('tolist',0,1,2).size, 3, "splat to list size")
cnt = 0
each b in splat('tolist',0,1,2)
	$test.Equal(cnt, b, "Each for splat and list")
	cnt = cnt + 1

# Range test
$test.True(4 =~ 0 .. 6, "Range match")

cnt = 0
each a:b in 0 .. 3
	$test.True(cnt===b, "Each on a range")
	cnt = cnt + 1

splatter = [...]
	local cnt = 0
	each r in ...
		$test.True(cnt === r, "Each on splat")
		cnt = cnt + 1
splatter(0,1,2,3,4)

cnt = 0
each b in +List(0,1,2)
	$test.True(cnt===b, "Each on a list")
	cnt=cnt+1

cnt = 0
each b in "Ὅμηρος"
	continue if false
	break if false
	$test.Equal(b, "Ὅμηρος"[cnt], "Each on a Text")
	cnt=cnt+1
	
index = +Index
index['a'] = 'a'
index['b'] = 'b'
each key:b in index
	$test.Equal(key, b, "Each on an Index")

# dot operators
type = +Type
	meth: []
		3
	.:meth = m = [] {4}
$test.True(type.meth==4, ".: override")
meth = [] {5}
type
	meth:= meth
$test.True(type.meth==5, ":= override")
$test.True(meth===type::meth, ":: indexing into type")
$test.True(meth===type::'meth', ":: indexing sym into type")
meth = 'meth'
$test.True(5===type.(meth), "calculated property")

# this blocks
a=+List
	<< 3
$test.True(a[0]===3, "this block with <<")
a using '<<'
	4,5
$test.True(a.size===3 and a[2]===5, "this block using <<")
a using [x] {<< x*x;}
	2;3
$test.True(a.size===5 and a[4]===9, "this block using method")

# Define a simple way to sum integers in a list
List.traits
	Sum: []
		local sum = 0
		sum = sum + n each n in self
		sum

list = +List
	<< n if n%2===0 each n in 1 .. 6
$test.True(list.Sum===12, "if/each clause")

# Add two methods to Integer: Sqrt and Primes
Integer.traits
	Sqrt: []
		self.Float.Sqrt.Integer
	Primes: []
		mults = +List
		+List
			each i in 2 .. self
				if not mults.Find(i)
					<< i
					mults<<j each j in 2*i..self..i if i<=self.Sqrt

$test.True((100).Primes.Sum===1060, "each/if clause for Primes")

# Fun times with 'using' clause on this block for printing
Vm using 'Print'
	"Primes: "
	each n in (100).Primes
		n.Text;" "
	"\n"

$test.True(false, "while clause") while false

a=2
a
	local a=3
$test.True(a===2, "block scope for local vars")

# 'do' block test
Res = +Type
	val: 1
	Begin:= [] {val: 2;}
	End:= [] {val: 3;}
do a,b = +Res, +Res
	$test.True(a.val===2, "Res.Begin")
	local x=1
$test.True(b.val===3, "Res.End")

$test.True(3 .'=='(3), "3==3")
each n in 1 .. 5
	match n
	with 1 .. 2
		$test.True(n>=1 and n<=2, "match with 1 .. 2")
	with 3,5
		$test.True(n===3 or n===5, "match with 3 or 5")
	else
		$test.True(n===4, "match else")
match Res using "==="
with Res
	$test.True(Res===Res, "match Res with Res using '==='")

each n in 4 .. 8
	n = 6.0 if n===6
	match n using [x] {x+1,x-1 if x =~ self;} into res
	with 4 .. 5, 7
		$test.True(res===n+1, "match method into res/4,5,7")
	with Integer into r,s
		$test.True(r===9 and s===7, "match method into r/Integer8")
	else
		$test.True(n==6.0, "matchmeth else")
