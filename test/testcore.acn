# Integer arithmetic tests
$test.Equal(-(-1), 1, "-(-1) == 1")
$test.Equal((-1).Abs, 1, "(-1).Abs == 1")
$test.Equal(--1, 1, "--1 == 1")
$test.Equal(5+2, 7, "5+2==7")
$test.Equal(5-3+16-1-1, 16, "5-3+16-1-1==16")
$test.Equal(5*5, 25, "5*5=25")
$test.Equal(7%5, 2, "7%5=2")
$test.Equal(4+4/2*3-4, 6, "4+4/2*3-4==6")
$test.Equal(2**3**2, 64, "2**3**2=64")
$test.Equal(2*(3+2), 10, "2*(3+2)==10")
$test.Equal((-2).Next, -1, "(-2).Next == -1")

# Integer coercion
$test.Equal(+Integer(" 34"), 34, "+Integer(' 34')==34")
$test.Equal(+Integer(4.2353), 4, "+Integer(4.2353)")
$test.Equal(+Integer(5), 5, "+Integer(5)==5")
$test.Equal(3*5.14, 15, "3*5.14==15")

# Integer comparison
$test.Equal(2<=>3, -1, "2<3")
$test.Equal(2<=>2.1, 0, "2==2.1")
$test.Equal(2<=>'sym', null, "(2<=>'sym')==null")
$test.Equal(5 .Max(1), 5, "5 .Max(1)==5")
$test.Equal(5 .Min(-14), -14, "5 .Min(-14)==-14")

# Integer bitwise operations
$test.Equal(0x23 .And(0xE1).Or(0x80).Xor(0x0F).Not, -0xAE-1, "0x23 .And(0xE1).Or(0x80).Xor(0x0F).Not==-0xAE-1")
$test.Equal(3 .Shr(1).Shl(2), 4, "3 .Shr(1).Shl(2)==4")

# Float arithmetic tests
$test.Equal(-(-1.), 1., "-(-1.) == 1.")
$test.Equal((-1.).Abs, 1., "(-1.).Abs == 1.")
$test.Equal(--1., 1., "--1. == 1.")
$test.Equal(5.+2., 7., "5.+2.=7.")
$test.Equal(5.*5., 25., "5.*5.=25.")
$test.Equal(7.%5., 2., "7.%5.=2.")
$test.Equal(2.**3.**2., 64., "2.**3.**2.=64.")
$test.Equal((-2.).Next, -1., "(-2.).Next == -1.")

$test.Equal(0. .Cos, 1., "(0.).Cos == 1.")

0x3C0 .Char # Unicode for pi

list = +List(5,3,2,3)
$test.Equal(list.size, 4, "list is incorrectly sized")
list.RemoveValue(3)
$test.Equal(list.size, 2, "RemoveValue did not remove two 3's")
list.RemoveValue(3)

arr = +List using '<<'
	4;3;2;1;'t';3;-1;0
arr.Randomize
#$test.Serialize(arr)
arr.Sort
arr.Reverse
#$test.Serialize(arr)
$test.Equal(arr.size, 8, "builder")

# Text
$test.Equal("abc", "abc", "'abc' not equal to 'abc'")
$test.Equal(+Symbol(123), +Symbol('123'), "Creating symbol from 123 != '123'")
$test.Equal(+Symbol("Extra"+" "*3).Text, "Extra   ", "+Symbol(\"Extra\"+\" \"*3).Text != \"Extra   \"")
$test.Equal((+Text("abc")<<"def"), "abcdef", "+Text(\"abc\")<<\"def\" != \"abcdef\"")
$test.Equal(("Ὅμηρος".Find("ρος")).Text, "3", "(\"Ὅμηρος\".Find(\"ρος\")).Text != \"3\"")
$test.Equal("abcabc".Find("ab",2), 3, "\"abcabc\".Find(\"ab\",2) != 3")
$test.Equal("Ὅμηρος">"abc", true, "\"Ὅμηρος\">\"abc\" != true")
$test.Equal("Ὅμηρος"[1], "μ", "\"Ὅμηρος\"[1] != \"μ\"")
$test.Equal("Ὅμηρος"[-2], "ς", "\"Ὅμηρος\"[-2] != \"ς\"")
$test.Equal("Ὅμηρος"[1,3], "μηρ", "\"Ὅμηρος\"[1,3] != \"μηρ\"")
$test.Equal("Ὅμηρος"[1, -3], "μηρο", "\"Ὅμηρος\"[1, -3] != \"μηρο\"")
$test.Equal("Ὅμηρος".size, 6, "\"Ὅμηρος\".size != 6")
homer = +Text("Ὅμηρος")
homer.size = 3
$test.Equal(homer, "Ὅμη", "resizing Ὅμηρος to 3 characters != Ὅμη")
$test.Equal(+Text("Ὅμηρος").Remove(2, -3), "Ὅμς", "Transform Ὅμηρος into Homer")
$test.Equal(+Text("Ὅμηρος").Replace("Homer", 0, 3), "Homerος", "Transform Ὅμηρος into Homerος")
$test.Equal(+Text("Abf").Insert(2, "cde"), "Abcdef", "+Text(\"Abf\").Insert(2, \"cde\") != \"Abcdef\"")

# Any
$test.Equal(0 .type, Integer.traits, ".type")
$test.Equal(0 .type, Integer.property('traits'), ".property")
$test.True(Integer.'==='(Integer), "Integer.'==='(Integer)")
$test.True(Integer.'=='(Integer), "Integer.'=='(Integer)")
$test.True(homer ~~ homer, "homer~~homer")
$test.True(1 .'<'(2), "1 .'<'(2)")
$test.True(3 .'>'(2), "3 .'>'(2)")
$test.True(2 .'<='(2), "2 .'<='(2)")
$test.True(2 .'>='(2), "2 .'>='(2)")

# Closure
$test.True(Closure.traits::'[]'.setmethod.callable?, "Closure.setmethod")

# Type
$test.True(4 ~~ 2 .. 5, "4 ~~ 2 .. 5")
$test.True(Type ~~ Type, "Res ~~ Res")
$test.True(Integer ~~ Type, "Res ~~ Type")
$test.True(4 ~~ All, "Res ~~ All")
$test.True(4 ~~ Integer, "4 ~~ Integer")
